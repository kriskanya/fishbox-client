// Generated by CoffeeScript 1.7.1
(function() {
  var FISH_BOX, cheerio, get_email, get_link, get_link_poll, gn, make_request, q, qs, request, _;

  qs = require('querystring');

  q = require('q');

  request = require('request');

  _ = require('lodash');

  cheerio = require('cheerio');

  FISH_BOX = 'fishbox.nxtgd.net';

  make_request = function(url) {
    var deferred;
    deferred = q.defer();
    request(url, function(error, response, body) {
      if (response.statusCode !== 200) {
        return deferred.reject(response.statusCode);
      } else {
        return deferred.resolve(JSON.parse(body));
      }
    });
    return deferred.promise;
  };

  get_email = function(handle) {
    return make_request('base_url' + ("/" + handle));
  };

  get_link = function(subject, contains_text, token) {
    var link_text;
    link_text = q.defer();
    gn.get_list(token).then(function(data) {
      var email_object;
      email_object = _.find(data.list, {
        mail_subject: subject
      });
      if (email_object != null) {
        return email_object['mail_id'];
      } else {
        return link_text.reject('no_matching_email');
      }
    }).then(function(email_id) {
      return gn.fetch_email(token, email_id).then(function(data) {
        var $;
        $ = cheerio.load(data.mail_body);
        return link_text.resolve($("a:contains(" + contains_text + ")").text());
      });
    }, function(error) {
      return link_text.reject(error);
    });
    return link_text.promise;
  };

  get_link_poll = function(subject, contains_text, token, attempts) {
    var link;
    if (attempts == null) {
      attempts = 0;
    }
    link = q.defer();
    attempts = attempts + 1;
    if (attempts < 6) {
      get_link(subject, contains_text, token).then(function(email) {
        return link.resolve(email);
      }, function(error) {
        if (error === 'no_matching_email') {
          return setTimeout(function() {
            return link.resolve(get_link_poll(subject, contains_text, token, attempts));
          }, 4000);
        } else {
          return link.reject(error);
        }
      });
    } else {
      link.reject('max_email_fetch_attempts_reached');
    }
    return link.promise;
  };

  gn = {
    get_email: get_email,
    set_email: set_email,
    check_email: check_email,
    fetch_email: fetch_email,
    get_list: get_list,
    get_link: get_link,
    get_link_poll: get_link_poll
  };

  module.exports = gn;

}).call(this);
